# Jetbrains
*.idea/
# Vscode
.vscode/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

# Test binary, built with `go test -c`
*.test

input.json
test.txt
sortedInput.txt

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk
bin/
obj/

.fake
.ionidenode_modules# Ignore Gradle project-specific cache directory
.gradle

# Ignore Gradle build output directory
build

# Gradle wrapper jar needs to be included
!gradle-wrapper.jar

#Ignore vscode stuff
.vscode
.project
.settings
.classpath
# Ignore Gradle project-specific cache directory
.gradle

# Ignore Gradle build output directory
build

# Gradle wrapper jar needs to be included
!gradle-wrapper.jar

#Ignore vscode stuff
.vscode
.project
.settings
.classpath
.dart_tool/
.packages
